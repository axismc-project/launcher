name: "Release"

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from tag
        id: tag_version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
              name: `Axis Launcher v${{ steps.tag_version.outputs.VERSION }}`,
              body: `
            ## 🚀 Axis Launcher v${{ steps.tag_version.outputs.VERSION }}
            
            ### ✨ Nouveautés
            - Interface utilisateur moderne et élégante
            - Système de création de personnage avec 4 races et 8 classes
            - Gestion des comptes et paramètres avancés
            - Support multi-plateforme (Windows, macOS, Linux)
            
            ### 📥 Installation
            - **Windows**: Téléchargez le fichier \`.msi\` pour l'installateur ou \`.exe\` pour la version portable
            - **macOS**: Téléchargez le fichier \`.dmg\` et glissez l'app dans Applications
            - **Linux**: Téléchargez le fichier \`.AppImage\` ou \`.deb\` selon votre distribution
            
            ### 🔧 Configuration requise
            - **Windows**: Windows 10 ou plus récent
            - **macOS**: macOS 10.15 (Catalina) ou plus récent
            - **Linux**: Distribution compatible avec GTK 3
            
            ### 🐛 Corrections
            - Amélioration de la stabilité générale
            - Optimisation des performances
            - Correction de bugs mineurs
            
            ---
            **Checksum des fichiers** : Voir les assets ci-dessous
            **Build** : ${context.sha.substring(0, 7)}
              `,
              draft: false,
              prerelease: false
            })
            return data.id

  build-tauri:
    name: Build Tauri (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            os: 'macos-latest'
            target: 'universal-apple-darwin'
          - platform: 'ubuntu-20.04'
            os: 'ubuntu-20.04'
            target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            os: 'windows-latest'
            target: 'x86_64-pc-windows-msvc'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm install

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          includeDebug: false
          includeRelease: true